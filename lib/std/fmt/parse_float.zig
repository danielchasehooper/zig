//
// Adapted from sqlite3's sqlite3AtoF()
// https://github.com/mackyle/sqlite/blob/ae5d3aa91a794f6f1486b3f453ec44c0aa4c086b/src/util.c#L375-L571
//
// adds support for parsing f128 floats, "nan", "inf"
//
// Returns a float if the string is a valid number, or error.invalidCharacter
// if the string is empty or contains extraneous text.  Valid numbers
// are in one of these formats:
//
//    [+-]digits[E[+-]digits]
//    [+-]digits.[digits][E[+-]digits]
//    [+-].digits[E[+-]digits]
//
// underscore characters may appear zero or more times between
// digits and are ignored by the parser: 500_000
//

const std = @import("std");
const ascii = std.ascii;

pub const ParseFloatError = error{InvalidCharacter};

//
// Compute 10 to the E-th power.  Examples:  E==1 results in 10.
// E==2 results in 100.  E==50 results in 1.0e50.
//
fn pow10(E_arg: u32) f128 {
    var E = E_arg;
    var x: f128 = 10.0;
    var r: f128 = 1.0;
    while (true) {
        if (E & 1 != 0) r *= x;
        E >>= 1;
        if (E == 0) break;
        x *= x;
    }
    return r;
}

pub fn parseFloat(comptime T: type, str: []const u8) !T {
    if (str.len == 0) return error.InvalidCharacter;

    if (ascii.eqlIgnoreCase(str, "nan")) {
        return std.math.nan(T);
    } else if (ascii.eqlIgnoreCase(str, "inf") or ascii.eqlIgnoreCase(str, "+inf")) {
        return std.math.inf(T);
    } else if (ascii.eqlIgnoreCase(str, "-inf")) {
        return -std.math.inf(T);
    }

    var z: usize = 0; // index into str[]
    // sign * significand * (10 ^ (esign * exponent))
    var sign: i32 = 1; // sign of significand
    var s: i128 = 0; // significand
    var d: i32 = 0; // adjust exponent for shifting decimal point
    var esign: i32 = 1; // sign of exponent
    var e: i32 = 0; // exponent
    var nDigits: i32 = 0;

    // get sign of significand
    if (str[z] == '-') {
        sign = -1;
        z += 1;
    } else if (str[z] == '+') {
        z += 1;
    }

    // copy max significant digits to significand
    while (z < str.len and ((ascii.isDigit(str[z]) and s < ((std.math.maxInt(@TypeOf(s)) - 9) / 10)) or str[z] == '_')) : (z += 1) {
        if (str[z] == '_') continue;
        s = s * 10 + (str[z] - '0');
        nDigits += 1;
    }

    // skip non-significant significand digits
    // (increase exponent by d to shift decimal left)
    while (z < str.len and (ascii.isDigit(str[z]) or str[z] == '_')) : (z += 1) {
        if (str[z] == '_') continue;
        nDigits += 1;
        d += 1;
    }

    do_atof_calc: {
        if (z >= str.len) break :do_atof_calc;

        // if decimal point is present
        if (str[z] == '.') {
            z += 1;

            if ((z < str.len and str[z] == '_') or str[z -| 2] == '_') {
                return error.InvalidCharacter;
            }

            // copy digits from after decimal to significand
            // (decrease exponent by d to shift decimal right)
            while (z < str.len and (ascii.isDigit(str[z]) or str[z] == '_')) : (z += 1) {
                if (str[z] == '_') continue;
                if (s < ((std.math.maxInt(@TypeOf(s)) - 9) / 10)) {
                    s = s * 10 + (str[z] - '0');
                    d -= 1;
                }

                nDigits += 1;
            }
        }
        if (z >= str.len) break :do_atof_calc;

        // if exponent is present
        if (str[z] == 'e' or str[z] == 'E') {
            z += 1;

            if (z >= str.len) return error.InvalidCharacter; // exponent not well formed

            if (str[z -| 2] == '_' or str[z] == '_') {
                return error.InvalidCharacter;
            }

            // get sign of exponent
            if (str[z] == '-') {
                esign = -1;
                z += 1;
            } else if (str[z] == '+') {
                z += 1;
            }

            // copy digits to exponent
            var eValid = false;
            while (z < str.len and (ascii.isDigit(str[z]) or str[z] == '_')) : (z += 1) {
                if (str[z] == '_') continue;
                e = (e *| 10 +| (str[z] - '0'));
                eValid = true;
            }

            if (!eValid) return error.InvalidCharacter;
        }
    } // do_atof_calc block

    if (z != str.len or nDigits == 0) return error.InvalidCharacter;

    // adjust exponent by d, and update sign
    e = (e * esign) + d;
    if (e < 0) {
        esign = -1;
        e *= -1;
    } else {
        esign = 1;
    }

    // Attempt to reduce exponent.
    while (e > 0) {
        if (esign > 0) {
            if (s >= (std.math.maxInt(@TypeOf(s)) / 10)) break;
            s *= 10;
        } else {
            if (@rem(s, 10) != 0) break;
            s = @divTrunc(s, 10);
        }
        e -= 1;
    }

    // adjust the sign of significand
    s = if (sign < 0) -s else s;

    var result: f128 = 0;
    if (s == 0) {
        // In the IEEE 754 standard, zero is signed.
        result = if (sign < 0) -0.0 else 0.0;
    } else if (e == 0) {
        result = @intToFloat(f128, s);
    } else {
        const scale = pow10(@intCast(u32, e));
        if (esign < 0) {
            result = @intToFloat(f128, s) / scale;
        } else {
            result = @intToFloat(f128, s) * scale;
        }
    }

    return @floatCast(T, result);
}

test "fmt.parseFloat" {
    const testing = std.testing;
    const expect = testing.expect;
    const expectEqual = testing.expectEqual;
    const approxEqAbs = std.math.approxEqAbs;
    const epsilon = 1e-7;

    inline for ([_]type{ f16, f32, f64, f128 }) |T| {
        const Z = std.meta.Int(.unsigned, @typeInfo(T).Float.bits);

        try testing.expectError(error.InvalidCharacter, parseFloat(T, ""));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "   1"));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "1   "));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "+"));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "-"));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "1_.5e2"));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "1._5e2"));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "1.5_e2"));
        try testing.expectError(error.InvalidCharacter, parseFloat(T, "1.5e_2"));

        try expectEqual(try parseFloat(T, "0"), 0.0);
        try expectEqual(try parseFloat(T, "0"), 0.0);
        try expectEqual(try parseFloat(T, "+0"), 0.0);
        try expectEqual(try parseFloat(T, "-0"), 0.0);

        try expectEqual(try parseFloat(T, "0e0"), 0);
        try expectEqual(try parseFloat(T, "2e3"), 2000.0);
        try expectEqual(try parseFloat(T, "1e0"), 1.0);
        try expectEqual(try parseFloat(T, "-2e3"), -2000.0);
        try expectEqual(try parseFloat(T, "-1e0"), -1.0);
        try expectEqual(try parseFloat(T, "1.234e3"), 1234);

        try expect(approxEqAbs(T, try parseFloat(T, "3.141"), 3.141, epsilon));
        try expect(approxEqAbs(T, try parseFloat(T, "-3.141"), -3.141, epsilon));

        // 4933 is the smallest magnitude exponent that causes an f128 to go to infinity and zero
        try expectEqual(try parseFloat(T, "1e-4933"), 0);
        try expectEqual(try parseFloat(T, "1e+4933"), std.math.inf(T));

        try expectEqual(@bitCast(Z, try parseFloat(T, "nAn")), @bitCast(Z, std.math.nan(T)));
        try expectEqual(try parseFloat(T, "inF"), std.math.inf(T));
        try expectEqual(try parseFloat(T, "-INF"), -std.math.inf(T));

        try expectEqual(try parseFloat(T, "0.4e0066999999999999999999999999999999999999999999999999999"), std.math.inf(T));
        try expect(approxEqAbs(T, try parseFloat(T, "0_1_2_3_4.7_8_9_0_0_0e0_0_2"), @as(T, 1234.789e2), epsilon));

        if (T != f16) {
            try expect(approxEqAbs(T, try parseFloat(T, "1e-2"), 0.01, epsilon));
            try expect(approxEqAbs(T, try parseFloat(T, "1234e-2"), 12.34, epsilon));

            try expect(approxEqAbs(T, try parseFloat(T, "123142.1"), 123142.1, epsilon));
            try expect(approxEqAbs(T, try parseFloat(T, "-123142.1124"), @as(T, -123142.1124), epsilon));
            try expect(approxEqAbs(T, try parseFloat(T, "0.7062146892655368"), @as(T, 0.7062146892655368), epsilon));
            try expect(approxEqAbs(T, try parseFloat(T, "2.71828182845904523536"), @as(T, 2.718281828459045), epsilon));
        }
    }

    // test rounding behavior
    try expectEqual(@bitCast(u64, try parseFloat(f64, "144115188075855870")), 0x4380000000000000); // exact
    try expectEqual(@bitCast(u64, try parseFloat(f64, "144115188075855884")), 0x4380000000000000); // round down
    try expectEqual(@bitCast(u64, try parseFloat(f64, "144115188075855885")), 0x4380000000000000); // round half toward zero
    try expectEqual(@bitCast(u64, try parseFloat(f64, "144115188075855886")), 0x4380000000000000); // round down??
    try expectEqual(@bitCast(u64, try parseFloat(f64, "144115188075855889")), 0x4380000000000001); // round up
    try expectEqual(@bitCast(u64, try parseFloat(f64, "144115188075855900")), 0x4380000000000001); // exact

    try expectEqual(@bitCast(u64, try parseFloat(f64, "9007199254740993")), 0x4340000000000000); // rounded down

    // test precision of f128
    try expectEqual(@bitCast(u128, try parseFloat(f128, "9007199254740993")), 0x40340000000000000800000000000000); // exact

    // test range of f128
    // at time of writing (Mar 2021), zig prints f128 values larger than f64 as "inf",
    // so I'm not 100% sure this hex literal is the corrent parse of 1e4930
    try expectEqual(@bitCast(u128, try parseFloat(f128, "1e4930")), 0x7ff8136c69ce8adff4397b050cae44c7);
}

test "fmt.parseFloat extra tests" {
    const expectEqual = std.testing.expectEqual;
    const TestCase = struct {
        str: []const u8,
        hex: u64,

        const Self = @This();
        pub fn init(hex: u64, str: []const u8) Self {
            return Self{ .str = str, .hex = hex };
        }

        pub fn format(t: *const Self, fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {
            _ = options;
            _ = fmt;
            try writer.print("{x} {s}", .{ t.hex, t.str });
        }
    };

    // Tests from https://github.com/ahrvoje/numerics/blob/278eef87cca1a48451cc136753004fa72a033caf/strtod/strtod_tests.toml
    const testCases = [_]TestCase{
        TestCase.init(0x348834c13cbf331d, "12.34E-56"),
        TestCase.init(0xc07c800000000000, "-456."),
        TestCase.init(0x405ec00000000000, "+123"),
        TestCase.init(0x7ff0000000000001, "nan"),
        TestCase.init(0x7ff0000000000001, "NaN"),
        TestCase.init(0x7ff0000000000001, "NAN"),
        TestCase.init(0x7ff0000000000000, "inf"),
        TestCase.init(0x7ff0000000000000, "Inf"),
        TestCase.init(0x7ff0000000000000, "INF"),
        TestCase.init(0xfff0000000000000, "-inf"),
        TestCase.init(0x7ff0000000000000, "+inF"),
        TestCase.init(0x7ff0000000000000, "+INF"),
        TestCase.init(0x3ff0000000000000, "1.0"),
        TestCase.init(0x4059000000000000, "1e2"),
        TestCase.init(0x44ada56a4b0835c0, "7.e22"),
        TestCase.init(0x44ada56a4b0835c0, "7.0e22"),
        TestCase.init(0x44ada56a4b0835c0, "7.0e+22"),
        TestCase.init(0x3b8a71fc0e147309, "7.0e-22"),
        TestCase.init(0xc02699999999999a, "-1.13e1"),
        TestCase.init(0x402699999999999a, "+1.13e+1"),
        TestCase.init(0x36e069d1347fd4b5, "23e-45"),
        TestCase.init(0x402a000000000000, ".13e2"),
        TestCase.init(0xbeb5cf751db94e6b, "-.13e-5"),
        TestCase.init(0x405ec00000000000, "123"),
        // TestCase.init(0x7ff0000000000001, "+nan"),
        // TestCase.init(0x7ff0000000000000, "infinity"),
        // TestCase.init(0x7ff0000000000000, "Infinity"),
        // TestCase.init(0x7ff0000000000001, "nan(type-0)"),
        // TestCase.init(0x7ff0000000000001, "+nan(catch_22)"),
        // TestCase.init(0x7ff0000000000000, "INFINITY"),
        // TestCase.init(0xfff0000000000000, "-infinity"),
        // TestCase.init(0xfff0000000000001, "-nan()"),
        TestCase.init(0x3ff0000000000000, "0.00000001e+8"),
        TestCase.init(0x3705f1a59c73408e, "123.e-45"),
        TestCase.init(0x4085300000000000, "678."),
        TestCase.init(0x0000000000000000, "0.000e+00"),
        TestCase.init(0x0000000000000000, "1e-400"),
        TestCase.init(0x0000000000000000, "2.4703282292062326e-324"),
        TestCase.init(0x0000000000000000, "2.4703282292062327e-324"),
        TestCase.init(0x0000000000000001, "2.4703282292062328e-324"),
        TestCase.init(0x0000000000000001, "4.9406564584124654e-324"),
        TestCase.init(0x00000000000007e8, "1e-320"),
        TestCase.init(0x000fffffffffffff, "2.2250738585072009e-308"),
        TestCase.init(0x0010000000000000, "2.2250738585072014e-308"),
        TestCase.init(0x3abef2d0f5da7dd9, "1e-25"),
        TestCase.init(0x3b282db34012b251, "1.0e-23"),
        TestCase.init(0x3ff3c0ca428c59fb, "1.2345678901234567890"),
        TestCase.init(0x402699999999999a, "1.13e1"),
        TestCase.init(0x43e158e460913d00, "1e+19"),
        TestCase.init(0x449017f7df96be18, "1.9e+22"),
        TestCase.init(0x4496deb1154f79ec, "2.7e22"),
        TestCase.init(0x449a420db02bd7d6, "3.1e22"),
        TestCase.init(0x44ada56a4b0835c0, "7e22"),
        TestCase.init(0x7fefffffffffffff, "1.7976931348623158e+308"),
        TestCase.init(0x7ff0000000000000, "1.7976931348623159e+308"),
        TestCase.init(0x7ff0000000000000, "1e+400"),
        TestCase.init(0x000fffffffffffff, "2.225073858507201136057409796709131975934819546351645648023426109724822222021076945516529523908135087914149158913039621106870086438694594645527657207407820621743379988141063267329253552286881372149012981122451451889849057222307285255133155755015914397476397983411801999323962548289017107081850690630666655994938275772572015763062690663332647565300009245888316433037779791869612049497390377829704905051080609940730262937128958950003583799967207254304360284078895771796150945516748243471030702609144621572289880258182545180325707018860872113128079512233426288368622321503775666622503982534335974568884423900265498198385487948292206894721689831099698365846814022854243330660339850886445804001034933970427567186443383770486037861622771738545623065874679014086723327636718749999999999999999999999999999999999999e-308"),
        TestCase.init(0x0010000000000000, "2.22507385850720113605740979670913197593481954635164564802342610972482222202107694551652952390813508791414915891303962110687008643869459464552765720740782062174337998814106326732925355228688137214901298112245145188984905722230728525513315575501591439747639798341180199932396254828901710708185069063066665599493827577257201576306269066333264756530000924588831643303777979186961204949739037782970490505108060994073026293712895895000358379996720725430436028407889577179615094551674824347103070260914462157228988025818254518032570701886087211312807951223342628836862232150377566662250398253433597456888442390026549819838548794829220689472168983109969836584681402285424333066033985088644580400103493397042756718644338377048603786162277173854562306587467901408672332763671875e-308"),
        TestCase.init(0x0010000000000000, "0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222507385850720138309023271733240406421921598046233183055332741688720443481391819585428315901251102056406733973103581100515243416155346010885601238537771882113077799353200233047961014744258363607192156504694250373420837525080665061665815894872049117996859163964850063590877011830487479978088775374994945158045160505091539985658247081864511353793580499211598108576605199243335211435239014879569960959128889160299264151106346631339366347758651302937176204732563178148566435087212282863764204484681140761391147706280168985324411002416144742161856716615054015428508471675290190316132277889672970737312333408698898317506783884692609277397797285865965494109136909540613646756870239867831529068098461721092462539672851562500000000000000001"),
        TestCase.init(0x7ff0000000000000, "179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792"),
        TestCase.init(0x7fefffffffffffff, "179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791.9999999999999999999999999999999999999999999999999999999999999999999999"),
        TestCase.init(0x0010000000000000, "2.2250738585072012e-308"),
        TestCase.init(0x0006123400000001, "8.44291197326099e-309"),
        TestCase.init(0x42c0000000000000, "35184372088831.999999999999999999999999999999999999"),
        TestCase.init(0x0000000000000000, "2.47032822920623272e-324"),
        TestCase.init(0x3ff199999999999a, "1.100000000000000088817841970012523233890533447265626"),
        TestCase.init(0x3f847ae147ae147b, ".010000000000000000057612911342378542997169"),
        TestCase.init(0x3ffd34fd8378ea83, "1.8254370818746402660437411213933955878019332885742187"),
        TestCase.init(0x43389e56ee5e7a58, "6929495644600919.5"),
        TestCase.init(0x432a9d28ff412a75, "3.7455744005952583e15"),
        TestCase.init(0x000fffffffffffff, "2.2250738585072011e-308"),
        TestCase.init(0x4c20000000000001, "5.0216813883093451685872615018317116712748411717802652598273e58"),
        TestCase.init(0x0000000008000000, "6.631236871469758276785396630275967243399099947355303144249971758736286630139265439618068200788048744105960420552601852889715006376325666595539603330361800519107591783233358492337208057849499360899425128640718856616503093444922854759159988160304439909868291973931426625698663157749836252274523485312442358651207051292453083278116143932569727918709786004497872322193856150225415211997283078496319412124640111777216148110752815101775295719811974338451936095907419622417538473679495148632480391435931767981122396703443803335529756003353209830071832230689201383015598792184172909927924176339315507402234836120730914783168400715462440053817592702766213559042115986763819482654128770595766806872783349146967171293949598850675682115696218943412532098591327667236328125E-316"),
        TestCase.init(0x0000000000010000, "3.237883913302901289588352412501532174863037669423108059901297049552301970670676565786835742587799557860615776559838283435514391084153169252689190564396459577394618038928365305143463955100356696665629202017331344031730044369360205258345803431471660032699580731300954848363975548690010751530018881758184174569652173110473696022749934638425380623369774736560008997404060967498028389191878963968575439222206416981462690113342524002724385941651051293552601421155333430225237291523843322331326138431477823591142408800030775170625915670728657003151953664260769822494937951845801530895238439819708403389937873241463484205608000027270531106827387907791444918534771598750162812548862768493201518991668028251730299953143924168545708663913273994694463908672332763671875E-319"),
        TestCase.init(0x0000800000000100, "6.953355807847677105972805215521891690222119817145950754416205607980030131549636688806115726399441880065386399864028691275539539414652831584795668560082999889551357784961446896042113198284213107935110217162654939802416034676213829409720583759540476786936413816541621287843248433202369209916612249676005573022703244799714622116542188837770376022371172079559125853382801396219552418839469770514904192657627060319372847562301074140442660237844114174497210955449896389180395827191602886654488182452409583981389442783377001505462015745017848754574668342161759496661766020028752888783387074850773192997102997936619876226688096314989645766000479009083731736585750335262099860150896718774401964796827166283225641992040747894382698751809812609536720628966577351093292236328125E-310"),
        TestCase.init(0x0000000000010800, "3.339068557571188581835713701280943911923401916998521771655656997328440314559615318168849149074662609099998113009465566426808170378434065722991659642619467706034884424989741080790766778456332168200464651593995817371782125010668346652995912233993254584461125868481633343674905074271064409763090708017856584019776878812425312008812326260363035474811532236853359905334625575404216060622858633280744301892470300555678734689978476870369853549413277156622170245846166991655321535529623870646888786637528995592800436177901746286272273374471701452991433047257863864601424252024791567368195056077320885329384322332391564645264143400798619665040608077549162173963649264049738362290606875883456826586710961041737908872035803481241600376705491726170293986797332763671875E-319"),
        TestCase.init(0x4e3fa69165a8eea2, "8.533e+68"),
        TestCase.init(0x19dbe0d1c7ea60c9, "4.1006e-184"),
        TestCase.init(0x7fe1cc0a350ca87b, "9.998e+307"),
        TestCase.init(0x0602117ae45cde43, "9.9538452227e-280"),
        TestCase.init(0x0a1fdd9e333badad, "6.47660115e-260"),
        TestCase.init(0x49e033d7eca0adef, "7.4e+47"),
        TestCase.init(0x4a1033d7eca0adef, "5.92e+48"),
        TestCase.init(0x4dd172b70eababa9, "7.35e+66"),
        TestCase.init(0x4b8b2628393e02cd, "8.32116e+55"),
        TestCase.init(0xbfed35696e58a32f, "-0.91276999999999997026378650843980722129344940185546876"),
        TestCase.init(0xc070a3d70a3d70a4, "-266.240000000000009094947017729282379150390624"),
        TestCase.init(0x3c97cb9433617c9c, "8.255628858767918002472043289952338102302250764062685473021474535926245152950286865234374e-17"),
        TestCase.init(0x43405e6cec57761a, "9214843084008499"),
        TestCase.init(0x3fe0000000000002, "0.500000000000000166533453693773481063544750213623046875"),
        TestCase.init(0x42c0000000000002, "3.518437208883201171875e13"),
        TestCase.init(0x404f44abd5aa7ca4, "62.5364939768271845828"),
        TestCase.init(0x3e0bd5cbaef0fd0c, "8.10109172351e-10"),
        TestCase.init(0x3ff8000000000000, "1.50000000000000011102230246251565404236316680908203125"),
        TestCase.init(0x433fffffffffffff, "9007199254740991.4999999999999999999999999999999995"),
        TestCase.init(0x44997a3c7271b021, "30078505129381147446200"),
        TestCase.init(0x4458180d5bad2e3e, "1777820000000000000001"),
        TestCase.init(0x3fe0000000000002, "0.50000000000000016656055874808561867439493653364479541778564453125"),
        TestCase.init(0x3fd92bb352c4623a, "0.3932922657273"),
        TestCase.init(0x0000000000000000, "2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328124999e-324"),
        TestCase.init(0x0000000000000000, "2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125e-324"),
        TestCase.init(0x0000000000000001, "2.4703282292062327208828439643411068618252990130716238221279284125033775363510437593264991818081799618989828234772285886546332835517796989819938739800539093906315035659515570226392290858392449105184435931802849936536152500319370457678249219365623669863658480757001585769269903706311928279558551332927834338409351978015531246597263579574622766465272827220056374006485499977096599470454020828166226237857393450736339007967761930577506740176324673600968951340535537458516661134223766678604162159680461914467291840300530057530849048765391711386591646239524912623653881879636239373280423891018672348497668235089863388587925628302755995657524455507255189313690836254779186948667994968324049705821028513185451396213837722826145437693412532098591327667236328125001e-324"),
        TestCase.init(0x0000000000000001, "7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984374999e-324"),
        TestCase.init(0x0000000000000002, "7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375e-324"),
        TestCase.init(0x0000000000000002, "7.4109846876186981626485318930233205854758970392148714663837852375101326090531312779794975454245398856969484704316857659638998506553390969459816219401617281718945106978546710679176872575177347315553307795408549809608457500958111373034747658096871009590975442271004757307809711118935784838675653998783503015228055934046593739791790738723868299395818481660169122019456499931289798411362062484498678713572180352209017023903285791732520220528974020802906854021606612375549983402671300035812486479041385743401875520901590172592547146296175134159774938718574737870961645638908718119841271673056017045493004705269590165763776884908267986972573366521765567941072508764337560846003984904972149117463085539556354188641513168478436313080237596295773983001708984375001e-324"),
        TestCase.init(0x7fe0000000000000, "8.9884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429647415148697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708031999e+307"),
        TestCase.init(0x7fe0000000000000, "8.9884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429647415148697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708032e+307"),
        TestCase.init(0x7fe0000000000001, "8.9884656743115805365666807213050294962762414131308158973971342756154045415486693752413698006024096935349884403114202125541629105369684531108613657287705365884742938136589844238179474556051429648741514697857438797685859063890851407391008830874765563025951597582513936655578157348020066364210154316532161708032001e+307"),
        TestCase.init(0x3ff0000010000000, "1.00000005960464477550"),
        TestCase.init(0x36c6000000000000, "7.7071415537864938e-45"),
        TestCase.init(0x0000000000000000, "2183167012312112312312.23538020374420446192e-370"),
        TestCase.init(0x0006c9a143590c14, "94393431193180696942841837085033647913224148539854e-358"),
        TestCase.init(0x3ff0000000000000, "99999999999999994487665465554760717039532578546e-47"),
        TestCase.init(0x44b52d02c7e14af6, "10000000000000000000000000000000000000000e-17"),
        TestCase.init(0x0007802665fd9600, "104308485241983990666713401708072175773165034278685682646111762292409330928739751702404658197872319129036519947435319418387839758990478549477777586673075945844895981012024387992135617064532141489278815239849108105951619997829153633535314849999674266169258928940692239684771590065027025835804863585454872499320500023126142553932654370362024104462255244034053203998964360882487378334860197725139151265590832887433736189468858614521708567646743455601905935595381852723723645799866672558576993978025033590728687206296379801363024094048327273913079612469982585674824156000783167963081616214710691759864332339239688734656548790656486646106983450809073750535624894296242072010195710276073042036425579852459556183541199012652571123898996574563824424330960027873516082763671875e-1075"),
        TestCase.init(0x4025cccccccccccd, "10.900000000000000012345678912345678912345"),
    };

    for (testCases) |t| {
        const val = parseFloat(f64, t.str) catch |err| {
            std.debug.print("errored on test {any}\n", .{t});
            return err;
        };
        try expectEqual(@bitCast(u64, val), t.hex);
    }
}
